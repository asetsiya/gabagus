

local druid = require("druid.druid")
local KarakterIsimleri = require("main.modul.karakterisimleri")
local Temalar = require("main.modul.temalar")
local animasyonlandirici = require("main.modul.animasyonlandirici")
local Kayitci = require("main.modul.kayitci")
local tricks = require("main.modul.tricks")
--local data_list = require("druid.extended.data_list")
--local slider = require("druid.extended.slider")


local score = 0
local score_artis_hizi = 1

local scoretab
local slidernode
local gameover
local replaybutton
local menubutton
local scoretext
local scoreintab
local madalyanodie
local cafer
local bestscorenode

local mutenode
ismuted = false

local gabagnode
local gabagsayinode

--local gecisnode

local karakternode
local temanode
local ksecimnode
local tsecimnode

local animasyondevammi

local mecvutchar = "kus"

local replaygeliyor = false

local sakinmuzikoynuyor = false

local gcoinnode
local gcoinsayinode

local katlayicinode
local katlayicitextnode

local temasecimekraninode
local temasecimekraniacikmi = false
local karaktersecimekraninode
local karaktersecimekraniacikmi = false
local temasecimekranianimasyonda = false
local karaktersecimekranianimasyonda = false

local icerikknode
local iceriktnode

local globaleuyayimmi = false
globaloyunkarakteri = "lkarakter1" --BURAYA YAZILAN SEY PEK BIR ISE YARAMAZ

--KAYIT KONTROL VE VARSAYILANLASTIRMA SISTEMLERI
if Kayitci.ktb("t") == nil then --TEMA
	Kayitci.ktb_yaz("t","ltema01")
end

if Kayitci.ktb("k") == nil then --KARAKTER
	Kayitci.ktb_yaz("k","lkarakter1")
end

if Kayitci.ktb("b") == nil then --BORU
	--print(Kayitci.ktb("b"))
	Kayitci.ktb_yaz("b","0.5")
end

globaltema = Kayitci.ktb("t") --BURAYA YAZILAN YARAR  - BASLANGIC TEMASI



local ksecbutonlari = {}
local tsecbutonlari = {}

globalboruhizi = 0.5

local puananimasyoncusunode
local bestanimasyoncusunode

local kresetlenecek
local tresetlenecek

local satinalfxnode

function init(self)

	msg.post("#proxyci", "load")

	--druid.register("data_list", data_list)
	--druid.register("slider", slider)
	
	scoretab = gui.get_node("scoretab")
	slidernode = gui.get_node("slider")
	gameover = gui.get_node("gameover")
	replaybutton = gui.get_node("replaybutton")
	menubutton = gui.get_node("menubuton")
	scoretext = gui.get_node("score")
	if globalmenumod then
		gui.set_enabled(scoretext, false)
	else
		gui.set_enabled(scoretext, true)
		-- BASLANGIC KARAKTERI
		karaktersec(self, Kayitci.ktb("k")) --BURAYA YAZILAN DA ISE YARAR - BASLANGIC KARAKTERI
	end
	scoreintab = gui.get_node("scoreintab")
	bestscorenode = gui.get_node("bestscore")
	mutenode = gui.get_node("mute")
	madalyanode = gui.get_node("madalya")
	cafernode = gui.get_node("cafer")

	msg.post(".", "acquire_input_focus")
	self.scoretext = gui.get_node("score")

	self.paused = false

	gui.set_enabled(scoretab, false)
	gui.set_enabled(gameover, false)
	gui.set_enabled(replaybutton, false)
	gui.set_enabled(menubutton, false)

	self.suankiscore = 0

	self.scorenode = gui.get_node("scoreintab")
	self.scorla = false

	gui.set_enabled(madalyanode, false)
	gui.set_enabled(cafernode, false)
	gui.set_enabled(mutenode, false)

	-- KAYIT ISLEMLERI

	
	--[[
	if kayit.best == nil then
		kayit = {best=0,gabag=0,isim="Gabakci", gcoin=0}
		sys.save(kayityeri, kayit)
	elseif not (kayit.best == nil) then
		if kayit.isim == nil then
			kayit = {best=kayit.best, gabag=kayit.gabag, gcoin=0}
		end
		sys.save(kayityeri, kayit)
	end
	]]--

	gabagnode = gui.get_node("gabag")
	gcoinnode = gui.get_node("gcoin")
	gabagsayinode = gui.get_node("gabagsayi")
	gcoinsayinode = gui.get_node("gcoinsayi")
	gui.set_enabled(gabagnode, false)
	gui.set_enabled(gcoinnode, false)
	gui.set_enabled(gabagsayinode, false)

	--gecisnode = gui.get_node("gecis")
	--gui.set_enabled(gecisnode, false)

	karakternode = gui.get_node("karakter")
	gui.set_enabled(karakternode, false)
	temanode = gui.get_node("tema")
	gui.set_enabled(temanode, false)

	ksecimnode = gui.get_node("ksecim")
	tsecimnode = gui.get_node("tsecim")

	animasyondevammi = false

	katlayicinode = gui.get_node("katlayici")
	katlayicitextnode = gui.get_node("katlayicitext")
	gui.set_enabled(katlayicinode, false)

	temasecimekraninode = gui.get_node("temasecimekrani")
	gui.set_position(temasecimekraninode, vmath.vector3(-1000,170,0))
	gui.set_enabled(temasecimekraninode, false)
	karaktersecimekraninode = gui.get_node("karaktersecimekrani")
	gui.set_position(karaktersecimekraninode, vmath.vector3(-1000,170,0))
	gui.set_enabled(karaktersecimekraninode, false)

	icerikknode = gui.get_node("kdata_list_vertical_content")
	iceriktnode = gui.get_node("tdata_list_vertical_content")

	-----------------------------DRUID

	self.druid = druid.new(self)
	self.sdruid = druid.new(self)
	-----------------------------DRUIDCI KARAKTER

	KarakterIsim.kontrol()

	self.kdata_set = {}
	for i = 1, KarakterIsim.sayi() do
		table.insert(self.kdata_set, "lkarakter"..i)
	end

	self.kprefab = gui.get_node("kprefab")
	gui.set_enabled(self.kprefab, false)


	-- Data list initialization
	local scroll_vertical = self.druid:new_scroll("kdata_list_vertical", "kdata_list_vertical_content")
	:set_horizontal_scroll(false)
	local grid_vertical = self.druid:new_static_grid("kdata_list_vertical_content", "kprefab", 1)

	-- We pass already created scroll and grid components with create function
	self.kdata_list_vertical = self.druid:new_data_list(scroll_vertical, grid_vertical, kcreate_vertical_element)
	self.kdata_list_vertical:set_data(self.kdata_set)
	-----------------------------DRUIDCI KARAKTER

	-----------------------------DRUIDCI TEMA

	Temalar.kontrol()

	self.tdata_set = {}
	for i = 1, Temalar.isimsayisi() do
		if i < 10 then
			table.insert(self.tdata_set, "ltema0"..i)
		else
			table.insert(self.tdata_set, "ltema"..i)
		end
	end

	self.tprefab = gui.get_node("tprefab")
	gui.set_enabled(self.tprefab, false)


	-- Data list initialization
	local scroll_vertical = self.druid:new_scroll("tdata_list_vertical", "tdata_list_vertical_content")
	:set_horizontal_scroll(false)
	local grid_vertical = self.druid:new_static_grid("tdata_list_vertical_content", "tprefab", 1)

	-- We pass already created scroll and grid components with create function
	self.tdata_list_vertical = self.druid:new_data_list(scroll_vertical, grid_vertical, tcreate_vertical_element)
	self.tdata_list_vertical:set_data(self.tdata_set)
	
	-----------------------------DRUIDCI TEMA

	-----------------------------DRUIDCI SLIDER

	
	local slider = self.sdruid:new_slider("slider_simple_pin", vmath.vector3(70, 0, 0), function(_, value)
		gui.set_text(gui.get_node("slider_simple_text"), math.ceil(value * 100))
		globalboruhizi = value
		Kayitci.ktb_yaz("b",tostring(globalboruhizi))
	end)


	slider:set(tonumber(Kayitci.ktb("b")))
	slider:set_input_node("slider_input")
	
	-----------------------------DRUIDCI SLIDER
	puananimasyoncusunode = gui.get_node("puananimasyoncusu")
	bestanimasyoncusunode = gui.get_node("bestanimasyoncusu")
	gui.set_enabled(puananimasyoncusunode, false)
	gui.set_enabled(bestanimasyoncusunode, false)
	gui.set_enabled(bestscorenode, true)
	gui.set_enabled(scoreintab, true)
	gui.set_position(puananimasyoncusunode, vmath.vector3(204,256,0))
	gui.set_position(bestanimasyoncusunode, vmath.vector3(84,256,0))
	gui.set_scale(puananimasyoncusunode, vmath.vector3(1,1,1))
	gui.set_scale(bestanimasyoncusunode, vmath.vector3(1,1,1))
	gui.set_color(puananimasyoncusunode, vmath.vector4(0,0,0,1))
end

function kcreate_vertical_element(self, data, index, data_list)
	local instance = gui.clone_tree(self.kprefab)
	
	--KARAKTER LISTELEME { ------------
	
	gui.set_enabled(instance["kprefab"], true) --GORUNUR YAP
	gui.set_text(instance["kprefabtexti"], KarakterIsimleri.getir(data)) --ISIMLERINI MODULDEN GETIR VE YAZ
	
	if KarakterIsimleri.fiyat(data) == 0 then
		gui.set_enabled(instance["ksec1"], false)
		gui.set_text(instance["ksec2"], "SELECT")
		gui.set_position(instance["ksec2"], vmath.vector3(0,-1,0))
		
	else
		gui.set_text(instance["ksec2"], KarakterIsimleri.fiyat(data)) --FIYATLARI MODULDEN GETIR VE YAZ
		gui.set_color(instance["ksec2"], vmath.vector4(1,1,0.5,1))
		
		if KarakterIsimleri.fiyat(data) < 10 then --FIYATA GORE KONUM AYARLAMALARI
			gui.set_position(instance["ksec1"], vmath.vector3(6,0,0))
		elseif KarakterIsimleri.fiyat(data) < 100 then
			gui.set_position(instance["ksec1"], vmath.vector3(10,0,0))
		elseif KarakterIsimleri.fiyat(data) <= 1000 then
			gui.set_position(instance["ksec1"], vmath.vector3(15,0,0))
		elseif KarakterIsimleri.fiyat(data) > 1000 then
			gui.set_position(instance["ksec1"], vmath.vector3(19,0,0))
		end
	end

	gui.play_flipbook(instance["kkafa"], data) --KAFA KISMININ FLIPBOOKUNU AYARLA

	if data == Kayitci.ktb("k") then --SECILI OLANLI SECILI GOSTER
		gui.play_flipbook(instance["ksectusuhe"], "geneltus2gri") --SECILMIS SEC TUSUNU GRI YAP
		kresetlenecek = instance["ksectusuhe"] --SONRADAN DUZELTMEK ICIN, GRI YAPILANI KAYDET
		gui.play_flipbook(ksecimnode, data) --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
	end
	
	--KARAKTER LISTELEME } ------------
	
	local button = self.druid:new_button(instance["ksectusuhe"], function()
		
		--KARAKTER BUTONA BASINCA { ------------

		if KarakterIsimleri.fiyat(data) == 0 then
			if kresetlenecek and tricks.nodevarmi(kresetlenecek) then
				gui.play_flipbook(kresetlenecek, "geneltus2")
			end
			gui.play_flipbook(instance["ksectusuhe"], "geneltus2gri") --TIKLANAN SEC TUSUNU GRI YAP
			kresetlenecek = instance["ksectusuhe"] --SONRADAN DUZELTMEK ICIN, GRI YAPILANI KAYDET
			gui.play_flipbook(ksecimnode, data) --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
			karaktersec(self,data) --SEC BUTONUNA BASILAN KARAKTERI GERCEKTEN SEC
			Kayitci.ktb_yaz("k",data)
		else
			if KarakterIsimleri.fiyat(data) > tonumber(gui.get_text(gcoinsayinode)) then --PARA YETMEDI
				animasyonlandirici.alamama(gcoinnode)
			else --SATIN AL
				if kresetlenecek and tricks.nodevarmi(kresetlenecek) then
					gui.play_flipbook(kresetlenecek, "geneltus2")
				end

				gui.set_text(gcoinsayinode, tonumber(gui.get_text(gcoinsayinode)) - KarakterIsimleri.fiyat(data)) 
				gui.set_enabled(instance["ksec1"], false)
				gui.set_text(instance["ksec2"], "SELECT")
				gui.set_position(instance["ksec2"], vmath.vector3(0,-1,0))

				gui.set_color(instance["ksec2"], vmath.vector4(1,1,1,1))
				gui.play_flipbook(instance["ksectusuhe"], "geneltus2gri") --TIKLANAN SEC TUSUNU GRI YAP
				kresetlenecek = instance["ksectusuhe"] --SONRADAN DUZELTMEK ICIN, GRI YAPILANI KAYDET
				gui.play_flipbook(ksecimnode, data) --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
				karaktersec(self,data) --SEC BUTONUNA BASILAN KARAKTERI GERCEKTEN SEC

				Kayitci.ktb_yaz("k",data)

				KarakterIsimleri.satinal(data)
				Kayitci.eski("gcoin",tonumber(gui.get_text(gcoinsayinode)))
			end
		end

		--KARAKTER BUTONA BASINCA } ------------
		
	end)
	--print(data_list.scroll.view_node)
	--print(gui.get_node("cafer"))
	button:set_click_zone(data_list.scroll.view_node)
	

	return instance["kprefab"], button
end

function tcreate_vertical_element(self, data, index, data_list)
	local instance = gui.clone_tree(self.tprefab)
	
	--TEMA LISTELEME { ------------

	
	gui.set_enabled(instance["tprefab"], true) --GORUNUR YAP
	gui.set_text(instance["tprefabtexti"], Temalar.isimgetir(data)) --ISIMLERINI MODULDEN GETIR VE YAZ

	if Temalar.fiyat(data) == 0 then
		gui.set_enabled(instance["tsec1"], false)
		gui.set_text(instance["tsec2"], "SELECT")
		gui.set_position(instance["tsec2"], vmath.vector3(0,-1,0))
	else
		gui.set_text(instance["tsec2"], Temalar.fiyat(data)) --FIYATLARI MODULDEN GETIR VE YAZ
		gui.set_color(instance["tsec2"], vmath.vector4(1,1,0.5,1))
	end
	
	gui.play_flipbook(instance["pbg1"], data.."1") --KAFA KISMININ FLIPBOOKUNU AYARLA
	gui.play_flipbook(instance["pbg2"], data.."2")
	gui.play_flipbook(instance["pbg3"], data.."3")
	gui.play_flipbook(instance["pbg4"], data.."4")

	if data == Kayitci.ktb("t") then
		gui.play_flipbook(instance["tsectusuhe"], "geneltus2gri") --TIKLANAN SEC TUSUNU GRI YAP
		tresetlenecek = instance["tsectusuhe"] --SONRADAN DUZELTMEK ICIN, GRI YAPILANI KAYDET

		gui.play_flipbook(gui.get_node("bg1"), data.."1") --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
		gui.play_flipbook(gui.get_node("bg2"), data.."2")
		gui.play_flipbook(gui.get_node("bg3"), data.."3")
		gui.play_flipbook(gui.get_node("bg4"), data.."4")
	end
	
	--TEMA LISTELEME } ------------

	local button = self.druid:new_button(instance["tsectusuhe"], function()
		
		--TEMA BUTONA BASINCA { ------------

		--[[
		if tresetlenecek then
			gui.play_flipbook(tresetlenecek, "geneltus2")
		end
		gui.play_flipbook(instance["tsectusuhe"], "geneltus2gri") --TIKLANAN SEC TUSUNU GRI YAP
		tresetlenecek = instance["tsectusuhe"]
		
		gui.play_flipbook(gui.get_node("bg1"), data.."1") --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
		gui.play_flipbook(gui.get_node("bg2"), data.."2")
		gui.play_flipbook(gui.get_node("bg3"), data.."3")
		gui.play_flipbook(gui.get_node("bg4"), data.."4")

		globaltema = data
		--]]

		if  Temalar.fiyat(data) == 0 then
			if tresetlenecek and tricks.nodevarmi(tresetlenecek) then
				gui.play_flipbook(tresetlenecek, "geneltus2")
			end
			gui.play_flipbook(instance["tsectusuhe"], "geneltus2gri") --TIKLANAN SEC TUSUNU GRI YAP
			tresetlenecek = instance["tsectusuhe"] --SONRADAN DUZELTMEK ICIN, GRI YAPILANI KAYDET
			
			gui.play_flipbook(gui.get_node("bg1"), data.."1") --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
			gui.play_flipbook(gui.get_node("bg2"), data.."2")
			gui.play_flipbook(gui.get_node("bg3"), data.."3")
			gui.play_flipbook(gui.get_node("bg4"), data.."4")
			
			globaltema = data --SEC BUTONUNA BASILAN KARAKTERI GERCEKTEN SEC
			Kayitci.ktb_yaz("t",data) -- VE KAYDET
		else
			if  Temalar.fiyat(data) > tonumber(gui.get_text(gcoinsayinode)) then --PARA YETMEDI
				animasyonlandirici.alamama(gcoinnode)
			else --SATIN AL
				if tresetlenecek and tricks.nodevarmi(tresetlenecek) then
					gui.play_flipbook(tresetlenecek, "geneltus2")
				end

				gui.set_text(gcoinsayinode, tonumber(gui.get_text(gcoinsayinode)) -  Temalar.fiyat(data)) 
				gui.set_enabled(instance["tsec1"], false)
				gui.set_text(instance["tsec2"], "SELECT")
				gui.set_position(instance["tsec2"], vmath.vector3(0,-1,0))

				gui.set_color(instance["tsec2"], vmath.vector4(1,1,1,1))
				gui.play_flipbook(instance["tsectusuhe"], "geneltus2gri") --TIKLANAN SEC TUSUNU GRI YAP
				tresetlenecek = instance["tsectusuhe"] --SONRADAN DUZELTMEK ICIN, GRI YAPILANI KAYDET
				
				gui.play_flipbook(gui.get_node("bg1"), data.."1") --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
				gui.play_flipbook(gui.get_node("bg2"), data.."2")
				gui.play_flipbook(gui.get_node("bg3"), data.."3")
				gui.play_flipbook(gui.get_node("bg4"), data.."4")
				
				globaltema = data --SEC BUTONUNA BASILAN KARAKTERI GERCEKTEN SEC

				Kayitci.ktb_yaz("t",data) --KAYDET SECILENI
				
				Temalar.satinal(data)
				
				Kayitci.eski("gcoin",tonumber(gui.get_text(gcoinsayinode)))
				
			end
		end
		
		--TEMA BUTONA BASINCA } ------------
		
	end)
	button:set_click_zone(data_list.scroll.view_node)

	return instance["tprefab"], button
end

function resetlevel(self)
	msg.post("#proxyci", "unload")
	score=0
	gui.set_text(self.scoretext, score)
	gui.set_text(scoreintab, 0)
	gui.set_position(scoretab, vmath.vector3(145,-200,0))
	gui.set_position(slidernode, vmath.vector3(145,-200,0))
	gui.set_position(replaybutton, vmath.vector3(145,-200,0))
	gui.set_position(menubutton, vmath.vector3(145,-200,0))
	gui.set_position(gameover, vmath.vector3(145,720,0))
	gui.set_enabled(scoretab, false)
	gui.set_enabled(slidernode, false)
	gui.set_enabled(gameover, false)
	gui.set_enabled(replaybutton, false)
	gui.set_enabled(menubutton, false)
	gui.set_enabled(scoretext, true)
	self.suankiscore = 0
	gui.set_enabled(madalyanode, false)
	gui.set_scale(madalyanode,vmath.vector3(1, 1, 1))
	gui.set_enabled(cafernode, false)
	gui.set_position(mutenode, vmath.vector3(400,480,0))
	gui.set_enabled(mutenode, false)
	gui.set_enabled(gabagnode, false)
	gui.set_enabled(gcoinnode, false)
	gui.set_enabled(gabagsayinode, true)
	gui.set_position(gabagnode, vmath.vector3(-150,460,0))
	gui.set_position(gcoinnode, vmath.vector3(-150,490,0))
	gui.set_enabled(karakternode, false)
	gui.set_position(karakternode, vmath.vector3(145, 640, 0))
	gui.set_enabled(temanode, false)
	gui.set_position(temanode, vmath.vector3(145, 640, 0))
	gui.set_enabled(katlayicinode, false)
	gui.set_position(temasecimekraninode, vmath.vector3(-1000,170,0))
	gui.set_enabled(temasecimekraninode, false)
	temasecimekraniacikmi = false
	temasecimekranianimasyonda = false
	gui.set_position(karaktersecimekraninode, vmath.vector3(-1000,170,0))
	gui.set_enabled(karaktersecimekraninode, false)
	karaktersecimekraniacikmi = false
	karaktersecimekranianimasyonda  = false
	gui.set_color(scoretext, vmath.vector4(1,1,1,1))
	gui.set_outline(scoretext, vmath.vector4(0,0,0,1))
	gui.set_color(self.scorenode, vmath.vector4(1,1,1,1))
	gui.set_outline(self.scorenode, vmath.vector4(0,0,0,1))
	gui.set_enabled(puananimasyoncusunode, false)
	gui.set_enabled(bestanimasyoncusunode, false)
	gui.set_enabled(bestscorenode, true)
	gui.set_enabled(scoreintab, true)
	gui.set_position(puananimasyoncusunode, vmath.vector3(204,256,0))
	gui.set_position(bestanimasyoncusunode, vmath.vector3(84,256,0))
	gui.set_scale(puananimasyoncusunode, vmath.vector3(1,1,1))
	gui.set_scale(bestanimasyoncusunode, vmath.vector3(1,1,1))
	gui.set_color(puananimasyoncusunode, vmath.vector4(0,0,0,1))
end

function temasecimekranigetir(self)
	if temasecimekranianimasyonda == false then
		gui.set_position(iceriktnode, vmath.vector3(0, 0, 0))
		self.scroll_pos = 0
		self.velocity = 0
		temasecimekranianimasyonda = true
		temasecimekraniacikmi = true
		gui.set_scale(temasecimekraninode, vmath.vector3(0.01,0.01,0))
		gui.set_position(temasecimekraninode, vmath.vector3(197,335,0))
		gui.set_enabled(temasecimekraninode, true)
		gui.animate(temasecimekraninode, gui.PROP_POSITION, vmath.vector3(145,170,0), gui.EASING_LINEAR, 0.15)
		gui.animate(temasecimekraninode, gui.PROP_SCALE, vmath.vector3(1,1,0), gui.EASING_LINEAR, 0.15,0,
		function()
			temasecimekranianimasyonda = false
		end)
	end
end

function temasecimekranigotur()
	if temasecimekraniacikmi == true and temasecimekranianimasyonda == false then
		temasecimekranianimasyonda = true
		gui.animate(temasecimekraninode, gui.PROP_POSITION, vmath.vector3(197,335,0), gui.EASING_LINEAR, 0.15)
		gui.animate(temasecimekraninode, gui.PROP_SCALE, vmath.vector3(0.01,0.01,0), gui.EASING_LINEAR, 0.15,0,
		function()
			gui.set_enabled(temasecimekraninode, false)
			gui.set_position(temasecimekraninode, vmath.vector3(-1000,170,0))
			temasecimekraniacikmi = false
			temasecimekranianimasyonda = false
		end)
	end
end

function karaktersecimekranigetir(self)
	if karaktersecimekranianimasyonda == false then
		gui.set_position(icerikknode, vmath.vector3(0, 0, 0))
		self.scroll_pos = 0
		self.velocity = 0
		karaktersecimekranianimasyonda = true
		karaktersecimekraniacikmi = true
		gui.set_scale(karaktersecimekraninode, vmath.vector3(0.01,0.01,0))
		gui.set_position(karaktersecimekraninode, vmath.vector3(91,335,0))
		gui.set_enabled(karaktersecimekraninode, true)
		gui.animate(karaktersecimekraninode, gui.PROP_POSITION, vmath.vector3(145,170,0), gui.EASING_LINEAR, 0.15)
		gui.animate(karaktersecimekraninode, gui.PROP_SCALE, vmath.vector3(1,1,0), gui.EASING_LINEAR, 0.15,0,
		function()
			karaktersecimekranianimasyonda = false
		end)
	end
end

function karaktersecimekranigotur()
	if karaktersecimekraniacikmi == true and karaktersecimekranianimasyonda == false then
		karaktersecimekranianimasyonda = true
		gui.animate(karaktersecimekraninode, gui.PROP_POSITION, vmath.vector3(91,335,0), gui.EASING_LINEAR, 0.15)
		gui.animate(karaktersecimekraninode, gui.PROP_SCALE, vmath.vector3(0.01,0.01,0), gui.EASING_LINEAR, 0.15,0,
		function()
			gui.set_enabled(karaktersecimekraninode, false)
			gui.set_position(karaktersecimekraninode, vmath.vector3(-1000,170,0))
			karaktersecimekraniacikmi = false
			karaktersecimekranianimasyonda = false
		end)
	end
end

function ksecimrenkleriniduzelt(self)
	for i in ipairs(self.karakterurunleri) do
		gui.play_flipbook(self.karakterurunleri[i], "sectusu")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("2") and action.pressed then
		--Kayitci.eski("gcoin",1000000)
		--Kayitci.eski("gabag",2)
		--Kayitci.eski("score",40)
		--Kayitci.dayakyendimi("evet")
	elseif action_id == hash("touch") and action.pressed and replaygeliyor==false then
		if gui.pick_node(replaybutton, action.x, action.y) and (temasecimekraniacikmi == false and karaktersecimekraniacikmi == false) then
			resetlevel(self)
		elseif gui.pick_node(menubutton, action.x, action.y) and (temasecimekraniacikmi == false and karaktersecimekraniacikmi == false) then
			msg.post("main:/anaekran/go#anaekran", "aktiflen")
			if sakinmuzikoynuyor then
				sound.stop("#sakinmuzik")
				sakinmuzikoynuyor = false
			end
		elseif gui.pick_node(ksecimnode, action.x, action.y) then
			if karaktersecimekraniacikmi == true then
				karaktersecimekranigotur()
			else
				temasecimekranigotur()
				karaktersecimekranigetir(self)
			end
		elseif gui.pick_node(tsecimnode, action.x, action.y) then
			if temasecimekraniacikmi == true then
				temasecimekranigotur()
			else
				karaktersecimekranigotur()
				temasecimekranigetir(self)
			end
		elseif temasecimekraniacikmi == true or karaktersecimekraniacikmi == true then
			if not (gui.pick_node(temasecimekraninode, action.x, action.y) or
			gui.pick_node(karaktersecimekraninode, action.x, action.y)) then
				if temasecimekraniacikmi == true then
					temasecimekranigotur()
				else
					karaktersecimekranigotur()
				end
			end
		elseif gui.pick_node(mutenode, action.x, action.y) and ismuted == false then
			gui.play_flipbook(mutenode, "muted")
			ismuted = true
		elseif gui.pick_node(mutenode, action.x, action.y) and ismuted == true then
			gui.play_flipbook(mutenode, "notmuted")
			ismuted = false
		end
	elseif action_id == hash("back") and action.pressed then
		print("gerilendik")
	end

	self.druid:on_input(action_id, action)
	if temasecimekraniacikmi == false and karaktersecimekraniacikmi == false then
		self.sdruid:on_input(action_id, action)
	end
end

function karaktersec(self,karakter)
	if karakter=="kus" then
		ksecimrenkleriniduzelt(self)
		gui.set_position(ksecimnode, vmath.vector3(0, -5, 0))
		gui.set_scale(ksecimnode, vmath.vector3(0.7, 0.7, 0))
		gui.play_flipbook(ksecimnode, "yellowbird-midflap")
		mecvutchar = "kus"
		globaleuyayimmi = false
		print("hata")
	elseif karakter=="parti" then
		ksecimrenkleriniduzelt(self)
		gui.set_position(ksecimnode, vmath.vector3(-5, 5, 0))
		gui.set_scale(ksecimnode, vmath.vector3(0.3, 0.3, 0))
		gui.play_flipbook(ksecimnode, "senol2")
		mecvutchar = "parti"
		globaleuyayimmi = false
		--gecis("partici")
		print("hata")
	elseif karakter=="kayra" then
		ksecimrenkleriniduzelt(self)
		gui.set_position(ksecimnode, vmath.vector3(0, -5, 0))
		gui.set_scale(ksecimnode, vmath.vector3(0.3, 0.3, 0))
		gui.play_flipbook(ksecimnode, "kayra1")
		mecvutchar = "kayra"
		globaleuyayimmi = false
		--gecis("kayraci")
		print("hata")
	else
		globaloyunkarakteri = karakter
		globaleuyayimmi = true
	end
end

function seramoni()
	animasyonlandirici.seramoni1(gabagsayinode,gabagnode,gameover,temanode,karakternode)
end



function olumekrani(self)
	if Kayitci.kaydidondur("gabag") > 0 then
		gui.set_text(gabagsayinode, Kayitci.kaydidondur("gabag"))
		gui.set_enabled(gabagnode, true)
		gui.set_enabled(gabagsayinode, true)
		gui.set_enabled(karakternode, true)
		gui.set_enabled(temanode, true)
		gui.animate(gabagnode, gui.PROP_POSITION, vmath.vector3(30,460,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
		gui.animate(gameover, gui.PROP_POSITION, vmath.vector3(144,425 ,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
		gui.animate(karakternode, gui.PROP_POSITION, vmath.vector3(91,345,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
		gui.animate(temanode, gui.PROP_POSITION, vmath.vector3(197,345,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
	else
		gui.animate(gameover, gui.PROP_POSITION, vmath.vector3(144,348,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
		
	end
	gui.set_enabled(gcoinnode, true)
	gui.set_text(gcoinsayinode, Kayitci.kaydidondur("gcoin"))
	gui.animate(gcoinnode, gui.PROP_POSITION, vmath.vector3(30,490,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
	gui.set_text(bestscorenode, Kayitci.kaydidondur("best"))
	gui.animate(mutenode, gui.PROP_POSITION, vmath.vector3(260,480,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
	gui.animate(scoretab, gui.PROP_POSITION, vmath.vector3(144,270,0), gui.EASING_LINEAR, 0.25,0.3,nil,gui.PLAYBACK_ONCE_FORWARD)
	gui.set_enabled(slidernode, true)
	gui.animate(slidernode, gui.PROP_POSITION, vmath.vector3(144,198,0), gui.EASING_LINEAR, 0.25,0.3,nil,gui.PLAYBACK_ONCE_FORWARD)
	self.hedefscore = score

	score_artis_hizi=score
	
	timer.delay(0.7, false, function() self.scorla = true end)
	
end

function inc_score(self,dt)
	local score_artisi = score_artis_hizi * dt
	local yeni_score = self.suankiscore + score_artisi
	self.suankiscore = math.min(yeni_score, self.hedefscore)
	gui.set_text(self.scorenode, tostring(math.floor(self.suankiscore)))
	if math.floor(self.suankiscore) >= 10 then -- 40 VEYA DAHA BUYUKSE
		gui.set_outline(self.scorenode, vmath.vector4(1,1,1,1))
		gui.set_color(self.scorenode, vmath.vector4(0,0,0,1))
	end
	if self.suankiscore == self.hedefscore then -- TAMAMLANDIGINDA
		self.scorla=false
		--[[
		if math.floor(self.suankiscore) == 61 then -- 61 ISE
			gui.set_color(self.scorenode, vmath.vector4(0.4,0.1,0.1,1))
			gui.set_outline(self.scorenode, vmath.vector4(0,0,1,1))
		end
		]]--
		madalyala(self)
	end
end

function madalyala(self)
	local yaptikmi = false
	local artacakgabag = 0
	local ekgcoin = 0
	
	if score < 1 then
		gui.set_enabled(cafernode, true)
		replaybuttongetir()
	elseif score < 3 then
		replaybuttongetir()
	elseif score < 5 then
		gui.set_scale(madalyanode,vmath.vector3(2, 2, 1))
		gui.play_flipbook(madalyanode, "bronze")
		gui.set_enabled(madalyanode, true)
		replaybuttongetir()
	elseif score < 7 then
		gui.set_scale(madalyanode,vmath.vector3(2, 2, 1))
		gui.play_flipbook(madalyanode, "silver")
		gui.set_enabled(madalyanode, true)
		replaybuttongetir()
	elseif score == 9 then
		gui.set_scale(madalyanode,vmath.vector3(0.4, 0.4, 1))
		gui.play_flipbook(madalyanode, "madalya39")
		gui.set_enabled(madalyanode, true)
		replaybuttongetir()
	elseif score < 10 then
		gui.set_scale(madalyanode,vmath.vector3(2, 2, 1))
		gui.play_flipbook(madalyanode, "gold")
		gui.set_enabled(madalyanode, true)
		replaybuttongetir()
	elseif score >= 10 then
		gui.set_scale(madalyanode,vmath.vector3(0.4, 0.4, 1))
		gui.play_flipbook(madalyanode, "mor")
		gui.set_enabled(madalyanode, true)
		artacakgabag = math.floor(score/10)
		if Kayitci.kaydidondur("gabag")==0 then
			Kayitci.eski("gabag",artacakgabag)
			seramoni()
		elseif Kayitci.kaydidondur("gabag") > 0 then
			yaptikmi = true
			Kayitci.eski("gabag",artacakgabag + Kayitci.kaydidondur("gabag"))
			gui.set_text(gabagsayinode, Kayitci.kaydidondur("gabag"))
			
			ekgcoin = (score + math.max(Kayitci.kaydidondur("best"), score)) * (artacakgabag + 1)
			Kayitci.eski("gcoin", ekgcoin + Kayitci.kaydidondur("gcoin")) 
			Kayitci.eski("gcoin", Kayitci.kaydidondur("gcoin"))
			
			gui.set_text(katlayicitextnode, artacakgabag + 1)
			katlayicigetir(self,artacakgabag + 1)
			
			replaybuttongetir()
		end
	end

	-- BEST SCORE KAYDET
	if score > Kayitci.kaydidondur("best") then
		Kayitci.eski("score",score)
		gui.set_text(bestscorenode, Kayitci.kaydidondur("best"))
	end

	if yaptikmi == false then
		Kayitci.eski("gcoin", score + Kayitci.kaydidondur("gcoin"))
		Kayitci.eski("gcoin",Kayitci.kaydidondur("gcoin"))
		gui.set_text(gcoinsayinode, Kayitci.kaydidondur("gcoin"))
	end

end

function katlayicigetir(self,kat)
	animasyonlandirici.seramoni2katlayici(katlayicinode,gcoinsayinode,puananimasyoncusunode,bestanimasyoncusunode,gui.get_text(self.scorenode),bestscorenode,scoreintab,kat)
end

function replaybuttongetir()
	replaygeliyor = true
	gui.animate(replaybutton, gui.PROP_POSITION, vmath.vector3(145,153,0), gui.EASING_LINEAR, 0.25,0,nil,gui.PLAYBACK_ONCE_FORWARD)
	gui.animate(menubutton, gui.PROP_POSITION, vmath.vector3(145,117,0), gui.EASING_LINEAR, 0.25,0,function() replaygeliyor = false end,gui.PLAYBACK_ONCE_FORWARD)
end

function on_message(self, message_id, message, sender)
	
	if message_id==hash("proxy_loaded") then
		msg.post("#proxyci", "enable")
	elseif message_id==hash("proxy_unloaded") then
		msg.post("#proxyci", "load")
	elseif message_id==hash("score+1") then
		score=score+1
		gui.set_text(scoretext, score)
		if score >= 10 then
			gui.set_outline(scoretext, vmath.vector4(1,1,1,1))
			gui.set_color(scoretext, vmath.vector4(0,0,0,1))
			if score == 61 then
				gui.set_color(scoretext, vmath.vector4(0.4,0.1,0.1,1))
				gui.set_outline(scoretext, vmath.vector4(0,0,1,1))
			end
		end
	elseif message_id==hash("die") then
		gui.set_enabled(scoretab, true)
		gui.set_enabled(gameover, true)
		gui.set_enabled(replaybutton, true)
		gui.set_enabled(menubutton, true)
		gui.set_enabled(scoretext, false)
		gui.set_enabled(mutenode, true)
		olumekrani(self)
		gui.play_flipbook(ksecimnode, Kayitci.ktb("k"))
		gui.play_flipbook(gui.get_node("bg1"), Kayitci.ktb("t").."1") --SECIM EKRANINDAKI FLIPBOOKU SECILENLE DEGISTIR
		gui.play_flipbook(gui.get_node("bg2"), Kayitci.ktb("t").."2")
		gui.play_flipbook(gui.get_node("bg3"), Kayitci.ktb("t").."3")
		gui.play_flipbook(gui.get_node("bg4"), Kayitci.ktb("t").."4")
	elseif message_id==hash("managergeldi") then
		if globaleuyayimmi == false then
			msg.post(sender, mecvutchar)
		else
			msg.post(sender, "globaleuy")
		end
	elseif message_id==hash("sakinmuzik") then
		if not sakinmuzikoynuyor then
			sound.play("#sakinmuzik")
			sakinmuzikoynuyor = true
		end
	end
	self.druid:on_message(message_id, message, sender)
	self.sdruid:on_message(message_id, message, sender)
end

local a = 0
function update(self, dt)
	if self.scorla then
		inc_score(self,dt)
	end
	
	self.druid:update(dt)
	self.sdruid:update(dt)
end

function final(self)
	msg.post(".", "release_input_focus")
	self.druid:final()
	self.sdruid:final()
end

















